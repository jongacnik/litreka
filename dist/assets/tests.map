{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","litreka/tests/helpers/data-transfer.js","litreka/tests/helpers/drag-drop.js","litreka/tests/helpers/ember-cli-clipboard.js","litreka/tests/helpers/ember-drag-drop.js","litreka/tests/helpers/ember-sortable/test-helpers.js","litreka/tests/helpers/mock-event.js","litreka/tests/integration/components/game-board-cell-test.js","litreka/tests/integration/components/game-board-test.js","litreka/tests/integration/components/letter-score-test.js","litreka/tests/integration/components/letter-stand-test.js","litreka/tests/integration/components/scores-list-test.js","litreka/tests/integration/components/webcam-test.js","litreka/tests/lint/app.lint-test.js","litreka/tests/lint/templates.template.lint-test.js","litreka/tests/lint/tests.lint-test.js","litreka/tests/test-helper.js","litreka/tests/unit/controllers/game/board-test.js","litreka/tests/unit/controllers/game/waiting-test.js","litreka/tests/unit/routes/application-test.js","litreka/tests/unit/routes/game/board-test.js","litreka/tests/unit/routes/game/connect-test.js","litreka/tests/unit/routes/game/waiting-test.js","litreka/tests/unit/services/game-state-test.js","litreka/tests/unit/services/peer-service-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"litreka/tests/helpers/data-transfer\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var c = Ember.Object.extend({\n    getData: function () {\n      return this.get('payload');\n    },\n    setData: function (dataType, payload) {\n      this.set(\"data\", {\n        dataType: dataType,\n        payload: payload\n      });\n    }\n  });\n  c.reopenClass({\n    makeMockEvent: function (payload) {\n      var transfer = this.create({\n        payload: payload\n      });\n      var res = {\n        dataTransfer: transfer\n      };\n\n      res.preventDefault = function () {\n        console.log('prevent default');\n      };\n\n      res.stopPropagation = function () {\n        console.log('stop propagation');\n      };\n\n      return res;\n    },\n    createDomEvent: function (type) {\n      var event = document.createEvent(\"CustomEvent\");\n      event.initCustomEvent(type, true, true, null);\n      event.dataTransfer = {\n        data: {},\n        setData: function (type, val) {\n          this.data[type] = val;\n        },\n        getData: function (type) {\n          return this.data[type];\n        }\n      };\n      return event;\n    }\n  });\n  var _default = c;\n  _exports.default = _default;\n});","define(\"litreka/tests/helpers/drag-drop\", [\"exports\", \"ember-native-dom-helpers\", \"litreka/tests/helpers/mock-event\"], function (_exports, _emberNativeDomHelpers, _mockEvent) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.drag = drag;\n\n  async function dragOver(dropSelector, moves) {\n    moves = moves || [[{\n      clientX: 1,\n      clientY: 1\n    }, dropSelector]];\n    return moves.forEach(async ([position, selector]) => {\n      let event = new _mockEvent.default(position);\n      await (0, _emberNativeDomHelpers.triggerEvent)(selector || dropSelector, 'dragover', event);\n    });\n  }\n\n  async function drop(dragSelector, dragEvent, options) {\n    let {\n      drop: dropSelector,\n      dropEndOptions,\n      dragOverMoves\n    } = options;\n    let dropElement = await (0, _emberNativeDomHelpers.find)(dropSelector);\n\n    if (!dropElement) {\n      throw `There are no drop targets by the given selector: '${dropSelector}'`;\n    }\n\n    await dragOver(dropSelector, dragOverMoves);\n\n    if (options.beforeDrop) {\n      await options.beforeDrop.call();\n    }\n\n    let event = new _mockEvent.default().useDataTransferData(dragEvent);\n    await (0, _emberNativeDomHelpers.triggerEvent)(dropSelector, 'drop', event);\n    return await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'dragend', dropEndOptions);\n  }\n\n  async function drag(dragSelector, options = {}) {\n    let dragEvent = new _mockEvent.default(options.dragStartOptions);\n    await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'mouseover');\n    await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'dragstart', dragEvent);\n\n    if (options.afterDrag) {\n      await options.afterDrag.call();\n    }\n\n    if (options.drop) {\n      await drop(dragSelector, dragEvent, options);\n    }\n  }\n});","define(\"litreka/tests/helpers/ember-cli-clipboard\", [\"exports\", \"ember-cli-clipboard/test-support\"], function (_exports, _testSupport) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.triggerSuccess = triggerSuccess;\n  _exports.triggerError = triggerError;\n  _exports.default = _default;\n\n  const getOwnerFromContext = c => c.container || c.owner;\n  /* === Legacy Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration test’s this context\n   * @param {String} selector - css selector of the copy-button instance\n   * @returns {Void}\n   */\n\n\n  function triggerSuccess(context, selector) {\n    const owner = getOwnerFromContext(context);\n    (0, _testSupport._fireComponentAction)(owner, selector, 'success');\n  }\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration test’s this context\n   * @param {String} selector - css selector of the copy-button instance\n   * @returns {Void}\n   */\n\n\n  function triggerError(context, selector) {\n    const owner = getOwnerFromContext(context);\n    (0, _testSupport._fireComponentAction)(owner, selector, 'error');\n  }\n  /* === Register Legacy Acceptance Test Helpers === */\n\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector) {\n      const owner = app.__container__;\n      (0, _testSupport._fireComponentAction)(owner, selector, 'success');\n    });\n    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector) {\n      const owner = app.__container__;\n      (0, _testSupport._fireComponentAction)(owner, selector, 'error');\n    });\n  }\n});","define(\"litreka/tests/helpers/ember-drag-drop\", [\"exports\", \"litreka/tests/helpers/data-transfer\"], function (_exports, _dataTransfer) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.drag = drag;\n\n  /* global triggerEvent , andThen */\n  function drop($dragHandle, dropCssPath, dragEvent) {\n    let $dropTarget = Ember.$(dropCssPath);\n\n    if ($dropTarget.length === 0) {\n      throw `There are no drop targets by the given selector: '${dropCssPath}'`;\n    }\n\n    Ember.run(() => {\n      triggerEvent($dropTarget, 'dragover', _dataTransfer.default.makeMockEvent());\n    });\n    Ember.run(() => {\n      triggerEvent($dropTarget, 'drop', _dataTransfer.default.makeMockEvent(dragEvent.dataTransfer.get('data.payload')));\n    });\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'dragend', _dataTransfer.default.makeMockEvent());\n    });\n  }\n\n  function drag(cssPath, options = {}) {\n    let dragEvent = _dataTransfer.default.makeMockEvent();\n\n    let $dragHandle = Ember.$(cssPath);\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'mouseover');\n    });\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'dragstart', dragEvent);\n    });\n    andThen(function () {\n      if (options.beforeDrop) {\n        options.beforeDrop.call();\n      }\n    });\n    andThen(function () {\n      if (options.drop) {\n        drop($dragHandle, options.drop, dragEvent);\n      }\n    });\n  }\n});","define(\"litreka/tests/helpers/ember-sortable/test-helpers\", [\"ember-sortable/helpers/drag\", \"ember-sortable/helpers/reorder\", \"ember-sortable/helpers/waiters\"], function (_drag, _reorder, _waiters) {\n  \"use strict\";\n});","define(\"litreka/tests/helpers/mock-event\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.createDomEvent = createDomEvent;\n  _exports.default = void 0;\n\n  class DataTransfer {\n    constructor() {\n      this.data = {};\n    }\n\n    setData(type, value) {\n      this.data[type] = value;\n      return this;\n    }\n\n    getData(type = \"Text\") {\n      return this.data[type];\n    }\n\n    setDragImage() {}\n\n  }\n\n  class MockEvent {\n    constructor(options = {}) {\n      this.dataTransfer = new DataTransfer();\n      this.dataTransfer.setData('Text', options.dataTransferData);\n      this.setProperties(options);\n    }\n\n    useDataTransferData(otherEvent) {\n      this.dataTransfer.setData('Text', otherEvent.dataTransfer.getData());\n      return this;\n    }\n\n    setProperties(props) {\n      for (let prop in props) {\n        this[prop] = props[prop];\n      }\n\n      return this;\n    }\n\n    preventDefault() {}\n\n    stopPropagation() {}\n\n  }\n\n  _exports.default = MockEvent;\n\n  function createDomEvent(type) {\n    let event = document.createEvent(\"CustomEvent\");\n    event.initCustomEvent(type, true, true, null);\n    event.dataTransfer = new DataTransfer();\n    return event;\n  }\n});","define(\"litreka/tests/integration/components/game-board-cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | game-board-cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"trkZMu6I\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"game-board-cell\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"C6O2Clcl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"game-board-cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"litreka/tests/integration/components/game-board-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | game-board', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iwewjatt\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"game-board\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"yurJiRHj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"game-board\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"litreka/tests/integration/components/letter-score-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | letter-score', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"U0LNUAV/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"letter-score\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QTqnsvmS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"letter-score\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"litreka/tests/integration/components/letter-stand-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | letter-stand', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"38kEiiWc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"letter-stand\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"T27gAtvX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"letter-stand\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"litreka/tests/integration/components/scores-list-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | scores-list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QhScEBTi\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"scores-list\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"FcNATAwR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"scores-list\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"litreka/tests/integration/components/webcam-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | webcam', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"r50S2zHn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"webcam\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"FZwElTcV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"webcam\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"litreka/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/game-board-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/game-board-cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/game-board.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/game-board.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/letter-points.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/letter-points.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/letter-stand.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/letter-stand.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/opponent-webcam.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/opponent-webcam.js should pass ESLint\\n\\n16:5 - Unexpected console statement. (no-console)\\n19:7 - Unexpected console statement. (no-console)\\n47:7 - Unexpected console statement. (no-console)\\n48:7 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('components/scores-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/scores-list.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/game/board.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/game/board.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/game/waiting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/game/waiting.js should pass ESLint\\n\\n17:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n  QUnit.test('data/board-layout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'data/board-layout.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('data/letters.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'data/letters.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/move.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/move.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/game/board.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/game/board.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/game/connect.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/game/connect.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/game/waiting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/game/waiting.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/connection-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/connection-service.js should pass ESLint\\n\\n20:5 - Unexpected console statement. (no-console)\\n24:7 - Unexpected console statement. (no-console)\\n38:5 - Unexpected console statement. (no-console)\\n48:5 - Unexpected console statement. (no-console)\\n65:5 - Unexpected console statement. (no-console)\\n84:7 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('services/game-state.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/game-state.js should pass ESLint\\n\\n50:7 - Unexpected console statement. (no-console)\\n64:7 - Unexpected console statement. (no-console)\\n82:5 - Unexpected console statement. (no-console)');\n  });\n});","define(\"litreka/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('litreka/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/components/game-board-cell.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/components/game-board-cell.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/components/game-board.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/components/game-board.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/components/letter-points.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/components/letter-points.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/components/letter-stand.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'litreka/templates/components/letter-stand.hbs should pass TemplateLint.\\n\\nlitreka/templates/components/letter-stand.hbs\\n  5:19  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('litreka/templates/components/opponent-webcam.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/components/opponent-webcam.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/components/scores-list.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'litreka/templates/components/scores-list.hbs should pass TemplateLint.\\n\\nlitreka/templates/components/scores-list.hbs\\n  3:4  error  elements cannot have inline styles  no-inline-styles\\n  7:56  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('litreka/templates/game/board.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/game/board.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/game/connect.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'litreka/templates/game/connect.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('litreka/templates/game/waiting.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'litreka/templates/game/waiting.hbs should pass TemplateLint.\\n\\nlitreka/templates/game/waiting.hbs\\n  1:7  error  Incorrect indentation for `\\n.snowflake {\\n  color: #fff;\\n  font-size: 1em;\\n  pointer-events: none;\\n}\\n\\n@-webkit-keyframes snowflakes-fall{0%{top:-10%}100%{top:100%}}@-webkit-keyframes snowflakes-shake{0%,100%{-webkit-transform:translateX(0);transform:translateX(0)}50%{-webkit-transform:translateX(80px);transform:translateX(80px)}}@keyframes snowflakes-fall{0%{top:-10%}100%{top:100%}}@keyframes snowflakes-shake{0%,100%{transform:translateX(0)}50%{transform:translateX(80px)}}.snowflake{position:fixed;top:-10%;z-index:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default;-webkit-animation-name:snowflakes-fall,snowflakes-shake;-webkit-animation-duration:10s,3s;-webkit-animation-timing-function:linear,ease-in-out;-webkit-animation-iteration-count:infinite,infinite;-webkit-animation-play-state:running,running;animation-name:snowflakes-fall,snowflakes-shake;animation-duration:10s,3s;animation-timing-function:linear,ease-in-out;animation-iteration-count:infinite,infinite;animation-play-state:running,running}.snowflake:nth-of-type(0){left:1%;-webkit-animation-delay:0s,0s;animation-delay:0s,0s}.snowflake:nth-of-type(1){left:10%;-webkit-animation-delay:1s,1s;animation-delay:1s,1s}.snowflake:nth-of-type(2){left:20%;-webkit-animation-delay:6s,.5s;animation-delay:6s,.5s}.snowflake:nth-of-type(3){left:30%;-webkit-animation-delay:4s,2s;animation-delay:4s,2s}.snowflake:nth-of-type(4){left:40%;-webkit-animation-delay:2s,2s;animation-delay:2s,2s}.snowflake:nth-of-type(5){left:50%;-webkit-animation-delay:8s,3s;animation-delay:8s,3s}.snowflake:nth-of-type(6){left:60%;-webkit-animation-delay:6s,2s;animation-delay:6s,2s}.snowflake:nth-of-type(7){left:70%;-webkit-animation-delay:2.5s,1s;animation-delay:2.5s,1s}.snowflake:nth-of-type(8){left:80%;-webkit-animation-delay:1s,0s;animation-delay:1s,0s}.snowflake:nth-of-type(9){left:90%;-webkit-animation-delay:3s,1.5s;animation-delay:3s,1.5s}.snowflake:nth-of-type(10){left:25%;-webkit-animation-delay:2s,0s;animation-delay:2s,0s}.snowflake:nth-of-type(11){left:65%;-webkit-animation-delay:4s,2.5s;animation-delay:4s,2.5s}\\n` beginning at L1:C7. Expected `\\n.snowflake {\\n  color: #fff;\\n  font-size: 1em;\\n  pointer-events: none;\\n}\\n\\n@-webkit-keyframes snowflakes-fall{0%{top:-10%}100%{top:100%}}@-webkit-keyframes snowflakes-shake{0%,100%{-webkit-transform:translateX(0);transform:translateX(0)}50%{-webkit-transform:translateX(80px);transform:translateX(80px)}}@keyframes snowflakes-fall{0%{top:-10%}100%{top:100%}}@keyframes snowflakes-shake{0%,100%{transform:translateX(0)}50%{transform:translateX(80px)}}.snowflake{position:fixed;top:-10%;z-index:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default;-webkit-animation-name:snowflakes-fall,snowflakes-shake;-webkit-animation-duration:10s,3s;-webkit-animation-timing-function:linear,ease-in-out;-webkit-animation-iteration-count:infinite,infinite;-webkit-animation-play-state:running,running;animation-name:snowflakes-fall,snowflakes-shake;animation-duration:10s,3s;animation-timing-function:linear,ease-in-out;animation-iteration-count:infinite,infinite;animation-play-state:running,running}.snowflake:nth-of-type(0){left:1%;-webkit-animation-delay:0s,0s;animation-delay:0s,0s}.snowflake:nth-of-type(1){left:10%;-webkit-animation-delay:1s,1s;animation-delay:1s,1s}.snowflake:nth-of-type(2){left:20%;-webkit-animation-delay:6s,.5s;animation-delay:6s,.5s}.snowflake:nth-of-type(3){left:30%;-webkit-animation-delay:4s,2s;animation-delay:4s,2s}.snowflake:nth-of-type(4){left:40%;-webkit-animation-delay:2s,2s;animation-delay:2s,2s}.snowflake:nth-of-type(5){left:50%;-webkit-animation-delay:8s,3s;animation-delay:8s,3s}.snowflake:nth-of-type(6){left:60%;-webkit-animation-delay:6s,2s;animation-delay:6s,2s}.snowflake:nth-of-type(7){left:70%;-webkit-animation-delay:2.5s,1s;animation-delay:2.5s,1s}.snowflake:nth-of-type(8){left:80%;-webkit-animation-delay:1s,0s;animation-delay:1s,0s}.snowflake:nth-of-type(9){left:90%;-webkit-animation-delay:3s,1.5s;animation-delay:3s,1.5s}.snowflake:nth-of-type(10){left:25%;-webkit-animation-delay:2s,0s;animation-delay:2s,0s}.snowflake:nth-of-type(11){left:65%;-webkit-animation-delay:4s,2.5s;animation-delay:4s,2.5s}\\n` to be at an indentation of 2 but was found at 0.  block-indentation\\n  29:12  error  you must use double quotes in templates  quotes\\n');\n  });\n});","define(\"litreka/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/game-board-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/game-board-cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/game-board-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/game-board-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/letter-score-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/letter-score-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/letter-stand-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/letter-stand-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/scores-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/scores-list-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/webcam-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/webcam-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/game/board-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/game/board-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/game/waiting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/game/waiting-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/game/board-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game/board-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/game/connect-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game/connect-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/game/waiting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game/waiting-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/game-state-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/game-state-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/peer-service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/peer-service-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"litreka/tests/test-helper\", [\"litreka/app\", \"litreka/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"litreka/tests/unit/controllers/game/board-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | game/board', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:game/board');\n      assert.ok(controller);\n    });\n  });\n});","define(\"litreka/tests/unit/controllers/game/waiting-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | game/waiting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:game/waiting');\n      assert.ok(controller);\n    });\n  });\n});","define(\"litreka/tests/unit/routes/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define(\"litreka/tests/unit/routes/game/board-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | game/board', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:game/board');\n      assert.ok(route);\n    });\n  });\n});","define(\"litreka/tests/unit/routes/game/connect-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | game/connect', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:game/connect');\n      assert.ok(route);\n    });\n  });\n});","define(\"litreka/tests/unit/routes/game/waiting-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | game/waiting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:game/waiting');\n      assert.ok(route);\n    });\n  });\n});","define(\"litreka/tests/unit/services/game-state-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | game-state', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:game-state');\n      assert.ok(service);\n    });\n  });\n});","define(\"litreka/tests/unit/services/peer-service-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | peer-service', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:peer-service');\n      assert.ok(service);\n    });\n  });\n});","define('litreka/config/environment', [], function() {\n  var prefix = 'litreka';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('litreka/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjBA;AACA;","file":"tests.js"}